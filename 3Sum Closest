/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        int finalSum=Integer.MIN_VALUE;
        int minDistance=Integer.MAX_VALUE;
        if(num==null||num.length<3)
           return finalSum;
        Arrays.sort(num);
        for(int i=0;i<num.length;i++)
        {  
             if(i==0 || num[i]!=num[i-1])
             {
                 int start=i+1;
                 int end=num.length-1;
                 while(start<end)
                 {
                     int sum=num[start]+num[end]+num[i];
                     int distance=Math.abs(target-sum);
                     if(distance==0) return sum;
                     if(distance<minDistance)
                     {
                         finalSum=sum;
                         minDistance=distance;
                     }
                     if(sum<target)
                     {
                         start++;
                         while(start<end && num[start]==num[start-1]) start++;
                     }
                     else
                     {
                         end--;
                         while(start<end && num[end]==num[end+1]) end--;
                         
                     }
                     
                 }
                 if(finalSum>target)
                    return finalSum;
             }
            
        }
        return finalSum;
    }
}
