/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null || l2==null) return l1==null?l2:l1;
        int carry=0;
        ListNode head=new ListNode(0);
        ListNode runner=head;
        while (l1!=null || l2 != null||carry>0)
        {
            int sum=(l1==null?0:l1.val)+(l2==null?0:l2.val)+carry;
            int currentVal=sum%10;
            ListNode current=new ListNode(currentVal);
            runner.next=current;
            runner=runner.next;
            carry=sum>=10?1:0;
            if(l1!=null)
               l1=l1.next;
            if(l2!=null)
               l2=l2.next;
        }
       
        
        
        return head.next;
        
    }
}
