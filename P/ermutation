/*
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/
public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> ret= new ArrayList<List<Integer>>();
        if(num==null || num.length==0) return null;
        permuteHelper(num, 0 ,ret);
        
        return ret;
        
    }
    public void permuteHelper(int[] num, int start,List<List<Integer>> ret){
        
        if(start==num.length){
            ArrayList<Integer> tmp= new ArrayList<Integer>();
            for(int val:num)
               tmp.add(val);
             ret.add(tmp);
        }
        
        
        for(int i= start; i<num.length;i++)
        {
            swap(num,start,i);
            permuteHelper(num,start+1,ret);
            swap(num,start,i);
            
        }
        
    }
    public void swap(int[] num, int i, int j)
    {
        
        int tmp=num[i];
        num[i]=num[j];
        num[j]=tmp;
    }
}
