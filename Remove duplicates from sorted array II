public class Solution {
    public int removeDuplicates(int[] A) {
        if(A == null) return 0;
        if(A.length<=2)
           return A.length;
        int p1=0;
        int p2=1;
        boolean isDup=false;
        while(p2<A.length)
        {
            if(A[p1]!=A[p2])
            {
               A[++p1]=A[p2];  
               isDup=false;
            }
            else if(A[p1]==A[p2] && isDup==false)
            {
               A[++p1]=A[p2];  
               isDup=true;
            }
            p2++;
        }
        return p1+1;
        
        
    }
}

/**
 * Solution:
 * Only difference is now we allow two duplicates. So we scan through the 
 * array and if we find the 3rd duplicate we just skip them.
 * We know it's 3rd duplicate by comparing the itor with second last elements in
 * final array (if A[itor] == A[len-2], then A[itor]==A[len-2]==A[len-1])
 */
int removeDuplicates(int A[], int n) {
    if (n <= 2) return n;       // no need to deal with n<=2 case.
    int len = 2, itor = 2;
    while (itor < n) {
        if (A[itor] != A[len-2]) 
            A[len++] = A[itor];
        itor++;
    }
    return len;
}
