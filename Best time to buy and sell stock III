/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length==0)
           return 0;
        int[] maxBy= new int[prices.length];
        int[] maxSince=new int[prices.length];
        for(int i=0; i<prices.length;i++)
        {
            
            maxBy[i]=0;
            maxSince[i]=0;
        }
        int min=prices[0];
        int max=prices[prices.length-1];
        int maxProfit=0;
        
        for(int i=1;i<prices.length;i++)
        {
            min=Math.min(min, prices[i]);
            maxBy[i]=Math.max(maxBy[i-1],prices[i]-min);
        }
        for(int i=prices.length-2;i>=0;i--)
        {
            max=Math.max(max,prices[i]);
            maxSince[i]=Math.max(maxSince[i+1],max-prices[i]);
            maxProfit=Math.max(maxBy[i]+maxSince[i],maxProfit);
            
        }
        return maxProfit;
        
    }
}
